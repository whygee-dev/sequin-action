name: "Sequin Service Setup"
description: "Sets up Sequin service with PostgreSQL and Redis"

inputs:
  sequin-version:
    description: "Version of Sequin to use"
    required: true
    default: "latest"
  pg-password:
    description: "Sequin's PostgreSQL password"
    required: true
    default: "sequin"
  secret-key-base:
    description: "Sequin's secret key base"
    required: true
    default: "wDPLYus0pvD6qJhKJICO4dauYPXfO/Yl782Zjtpew5qRBDp7CZvbWtQmY0eB13If"
  vault-key:
    description: "Sequin's vault key"
    required: true
    default: "2Sig69bIpuSm2kv0VQfDekET2qy8qUZGI8v3/h3ASiY="
  config-file:
    description: "Path to config file"
    required: true
  health-check-timeout:
    description: "Timeout in seconds for health check"
    required: false
    default: "30"

runs:
  using: "composite"
  steps:
    - name: Set up Docker Compose
      uses: docker/setup-compose-action@v1

    - name: Create docker-compose file
      shell: bash
      run: |
        cat > docker-compose.yml << EOL
        version: '3.8'
        services:
          sequin:
            image: sequin/sequin:${{ inputs.sequin-version }}
            network_mode: host
            environment:
              - PG_HOSTNAME=localhost
              - PG_DATABASE=sequin
              - PG_PORT=7377
              - PG_USERNAME=sequin
              - PG_PASSWORD=${{ inputs.pg-password }}
              - PG_POOL_SIZE=20
              - SECRET_KEY_BASE=${{ inputs.secret-key-base }}
              - VAULT_KEY=${{ inputs.vault-key }}
              - REDIS_URL=redis://localhost:7378
              - CONFIG_FILE_PATH=/config/config.local.yml
            volumes:
              - ${{ inputs.config-file }}:/config/config.local.yml
            depends_on:
              sequin_postgres:
                condition: service_healthy
              sequin_redis:
                condition: service_started
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:7376/health"]
              interval: 10s
              timeout: 5s
              retries: 5
              start_period: 10s

          sequin_postgres:
            image: postgres:16-alpine
            network_mode: host
            environment:
              - POSTGRES_DB=sequin
              - POSTGRES_USER=sequin
              - POSTGRES_PASSWORD=${{ inputs.pg-password }}
              - PGPORT=7377

            command: ["postgres", "-c", "wal_level=logical"]
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U sequin -d sequin"]
              interval: 10s
              timeout: 2s
              retries: 5
              start_period: 2s
              start_interval: 1s

          sequin_redis:
            image: redis:7
            network_mode: host
            command: ["redis-server", "--port", "7378"]
        EOL

    - name: Start services
      shell: bash
      run: docker compose up -d

    - name: Show Sequin logs periodically
      shell: bash
      run: |
        nohup bash -c 'while true; do echo "=== Sequin Logs ==="; docker compose logs --tail=100 sequin; sleep 30; done' > /dev/null 2>&1 &

    - name: Check for healthy sequin service for 30 seconds, show logs if not healthy
      shell: bash
      run: |
        timeout=$((${{ inputs.health-check-timeout }}))
        while [ $timeout -gt 0 ]; do
          if curl -s -f http://127.0.0.1:7376/health > /dev/null && docker compose logs sequin | grep -q "\[SlotProcessorServer\] Initialized"; then
            echo "Sequin service is healthy and initialized"
            echo "Latest Sequin logs:"
            docker compose logs --tail=100 sequin
            exit 0
          fi
          if [ $((timeout % 60)) -eq 0 ]; then
            echo "Latest Sequin logs:"
            docker compose logs --tail=100 sequin
          fi
          sleep 1
          timeout=$((timeout-1))
        done
        echo "Sequin service is not healthy after $timeout seconds"
        echo "Final Sequin logs:"
        docker compose logs sequin
        exit 1
